{"title" : "Initiation à React.js","chapters" : [{"titles" : ["1. Introduction"],"content": "<p>Depuis l’ancêtre <a href=\"https://jquery.com\" target=\"_blank\">Jquery</a> jusqu’à <a target=\"_blank\" href=\"https://vuejs.org\">Vue.js</a>, en passant par le classique <a target=\"_blank\" href=\"http://vanilla-js.com/\">VanillaJS<a href=\"#vanilla\"><sup>1</sup></a>, le JavaScript croule sous les frameworks, au point que cela est une plaisanterie dans le monde du développement. Dans ces conditions, comment en choisir un&nbsp;? Et tout particulièrement React.js.</p><p>Mais d'abord qu'est-ce qu'un framework front-end&nbsp;? Cela représente tout ensemble de classes, fonctions et utilitaires qui nous facilite la création d'applications riches pour les navigateurs (et, de plus en plus, pour les mobiles). En gérant les différences entre les navigateurs, ils permettent aux développeurs de se focaliser sur le plus important et de ne pas avoir réinventer la roue pour tous les besoins classiques de nos applications : gestion de l'interface utilisateur, des événements, du DOM, des formulaires, de l’évolution dans le temps des données manipulées par l'interface, etc.</p><p>Mais pourquoi choisir React.js&nbsp;?</p><ul><li>React est sans doute le framework front-end le plus populaire aujourd’hui</li><li>Ses bases sont assez simples à apprendre, car il se focalise sur le cœur du problème : la gestion de l’interface utilisateur.</li><li>Un fois, les bases connues, il est simple d'ajouter d'autres briques applicatives, comme le routage côté client, le stockage des données, etc..., via les autres éléments de son écosystème, comme <a target=\"_blank\" href=\"https://reacttraining.com/react-router/\">React-Router</a> ou <a href=\"http://redux.js.org/\" target=\"_blank\">Redux</a></li></ul><div class=\"card box-shadow-0 border-success\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">🎨 EXEMPLE ILLUSTRÉ</h5><p>Retrouvez le code source de cette initiation sur <a href=\"https://github.com/SedTheCursed/react-tuto-thp\" target=\"_blank\">GitHub</a>.</p></div></div></div><p id=\"vanilla\"><small><sup>1</sup>. Oui, c'est du JavaScript pur. Cela avait été développé pour se moquer de la recrudescence de frameworks.</small></p>"},{"titles" : ["2. Historique"],"content" : "<p>React a été crée par Jordan Walke, un ingénieur logiciel de Facebook, et déployé pour la première fois en 2011 sur Facebook, puis sur Instagram en 2012, avant de devenir, en 2013, un projet open-source, sous la licence MIT, mais toujours sous la houlette de Facebook.</p><p>Au travers de React.js et React Native,le moteur de rendu permettant de créer des applications natives sur Android et iOS présenté en 2015, nombre de \"gros sites\" utilise React&nbsp;: Airbnb, Dailymotion, Discord, Dropbox, Facebook évidemment, IMDb, Instagram, Netflix, Paypal, Tesla, Twitter, Wordpress, et des centaines d’autres en sont quelques exemples.</p><p>En 2017, React 360 a été présenté, permettant le développement VR avec React.</p>"},{"titles" : ["3. La ressource"],"content" : "<p>Avant de nous plonger plus en avant dans le fonctionnement de React.js, voyons les grands tenants de sa philosophie.</p><h5>Les composants</h5><p>Le web avait été conçu initialement pour des documents, et non pour des applications. Cela se ressentait dans le fonctionnement de HTML, de CSS et du DOM, dès lors que l'on essayait d'en créer une, ce qui aboutissait à un code incompréhensible, ardu à maintenir et à faire évoluer, bourré de bugs. React, à l'instar de ses concurrents visant à développer des applications, a choisi de s'éloigner de la séparation stricte entre la structure (HTML), l'aspect (CSS) et le comportement (JS), classiquement écrits dans des fichiers bien distincts au profit de composants liants les trois langages.</p><p>Le fait de rassembler dans un même fichier source ces trois volets, connectés par une syntaxe concise et familière (baptisée JSX, pour \"JavaScript as Xml\") facilite considérablement le développement. En effet, il est plus simple de retrouver les informations et de comprendre la logique dans des fichiers courts que dans des fichiers de plusieurs centaines de lignes. Par exemple, les règles CSS d'un composant sont inclues dans un fichier au nom du composant.</p><p>Le but des composants est d'être réutilisable et sont, pour la plupart, créés en combinant d’autres composants plus simples, faisant ainsi une arborescence, structurant l'interface.</p><h5>Données descendantes et changements montants</h5><p>Pour régler un problème principal des interfaces utilisateurs, à savoir la modification des données et les changements dans l'interface que cela provoque, React à choisi une politique simple. Chaque composant est le seul responsable des données envoyé à ses composants-enfants. Quant aux changements, ils remontent, depuis le composant responsable de ceux-ci, de composant parent en composant parent, jusqu’à atteindre un niveau suffisamment haut pour contenir tous les autres composants intéressés.</p><p>Le cœur de cela sont <strong>les props</strong> et <strong>l'état local</strong>, sur lesquels nous reviendrons plus longuement.</p><h5>Le DOM virtuel</h5>Au lieu de manipuler directement le DOM HMTL, React choisi de créer un <strong>DOM virtuel</strong>, qui est réconcilié avec le DOM du navigateur au moment du rendu. Outre l'amélioration nettes des performances, le principal avantage du DOM virtuel est son aspect multimédia. Il suffit de changer le moteur de rendu pour changer le contexte&nbsp;: navigateur, applications mobiles, réalité virtuelle, etc...</p><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>React s'appuie très lourdement sur <strong>l'ES6.</strong>  <a target=\"_blank\" href=\"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664806-modernisez-votre-javascript-avec-es2015\">Ce chapitre</a> vous permettra de vous rafraîchir les idées sur les changements que cela apporte.</p></div></div></div>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest"],"content" : "<p>Le meilleur moyen de créer une application React est de passer un outil du nom de Create-React-App. Il génère automatiquement le squelette applicatif et masque la complexité potentielle de configuration des briques techniques associées : gestion de JavaScript moderne (ES2015+), bundling de notre application (avec Webpack), serveur de développement, génération de fichiers de production optimisés, etc.</p><p>Pour pouvoir l’utiliser, cela nécessite un petit installfest.</p>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.1. Node"],"content" : "CRA est écrit en Node et nécessite Node 6+. Node.js est un environnement d'exécution JavaScript installable partout, qui permet d'écrire tout types de programmes, entre autre de faire le backend d’un site en javascript.</p><p>Node peut être installé de nombreuses façons. Commencez par ouvrir le terminal, pour vérifier si Node est déjà installé.</p><pre><code class=\"language-bash\">$ node --version\nv10.15.3</code></pre><p>Si vous obtenez un message d’erreur, ou un numéro de version antérieur assez éloigné de la version 10.15.3, qui est la version stable actuelle, vous êtes bon pour une petite session d’installation.<h5>MacOS</h5><p>Vous pouvez télécharger l’installateur sur <a href=\"https://nodejs.org/fr/#download\" target=\"_blank\">le site de Node.js</a> ou utiliser Homebrew<p><pre><code class=\"language-bash\">$ brew install node</code></pre><h5>Debian/Ubuntu/Mint</h5><pre><code class=\"language-bash\"># Ubuntu et ses distros filles\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$  sudo apt-get install -y nodejs\n\n# Debian, en tant que root\n$ curl -sL https://deb.nodesource.com/setup_10.x | bash -\n$ apt-get install -y nodejs</code></pre><p>Pour les autres distros, vous pouvez suivre <a href=\"https://nodejs.org/en/download/package-manager/\" target=\"_blank\">ce lien</a></p><p>Si Node est installé, mais que la version n'est pas à jour, <a href=\"https://www.hostingadvice.com/how-to/update-node-js-latest-version/\" target=\"_blank\">cet article</a> explique comment faire la mise-à-jour.</p>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.2. NPM"],"content" : "<p>NPM est le gestionnaire de modules de Node, utilisé pour de nombreux autres types de contenus. C’est à la fois un outil en ligne de commande (la commande  npm ) et un vaste catalogue de modules. La commande permet notamment d'installer et de mettre à jour les modules que l'on sélectionne pour nos projets.</p><p>NPM est livré avec node, mais il est sans doute préférable de le mettre à jour afin d'avoir la dernière version</p><pre><code class=\"language_bash\">$ sudo npm install npm@latest -g</code></pre><p>Vérifiez ensuite&ńbsp;:</p><pre><code class=\" language-bash\">$ npm --version\n6.9.0</code></pre>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.3. Create-React-App"],"content" : "<p>Enfin, nous allons pouvoir installer CRA. Le plus simple est par le terminal avec la commande suivante&nbsp;:</p><pre><code class=\"language-bash\">$ sudo npm install --global create-react-app</code></pre><p>Normalement, vous devriez avoir la dernière version en date, la 3.0.1.</p>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.4. Créer notre première application React"],"content" : "<p>Voilà ! Il est temps à présent de créer notre première application React&nbsp;!</p><p>Placez-vous dans le dossier où vous voulez installer l'appli et utiliser la commande suivante&nbsp;:</p><pre><code class=\"language-bash\">$ create-react-app MONAPPLICATION</code></pre><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>Il se peut que le <code class=\"language-bash\">create-react-app</code> retourne des erreurs du type <code class=\"language-bash text-danger\">Unhandled rejection Error: EACCES: permission denied, open '/home/USER/.npm/_cacache/tmp/8c63fe0a'</code>, mais rien qu'un <code class=\"language-bash\">sudo</code> ne saurait régler.<p></div></div></div><div class=\"card box-shadow-0 border-info\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">🚀 ALERTE BONNE ASTUCE</h5><p>Pour créer plus rapidement une application, ajouter la ligne suivante dans son fichier de configuration de son terminal.<pre><code class=\"language-bash\">alias CRA='create-react-app'</code></pre></p></div></div></div><p>Le dossier ainsi produit, contient déja pas mal de choses&nbsp;:<ul><li>Le dossier node_modules, où toutes les dépendances ont été installées</li><li>une page HTML (  public/index.html ), qui accueillera l'application</li><li>le point d’entrée de l’application ( src/index.js )</li><li> un premier composant (src/App.js ) avec ses styles à part et ses tests</li></ul><p>Seuls  src/index.js  et  public/index.html  sont exigés par CRA. Tout le reste est à notre gré. Par exemple, vous pouvez supprimer le logo.svg, qui est utiliser par la page par défaut.<br/>Basiquement, nous ne travaillons quasiment que dans le dossier src/ où seront placés tous les fichiers sources (JS, CSS, test, etc.), afin qu'ils puissent être utilisés par le Webpack</p><p>Le message de fin de génération nous propose quatre commandes&nbsp;:</p><dl><dt>npm run build</dt><dd>Qui génère les fichiers pour la production</dd><dt>npm test</dt><dd>Qui lance la batterie de tests. (Sujet qui ne sera pas abordé par cette initiation)</dd><dt>npm run eject</dt><dd>Qui fait sortir l'application du contexte de CRA, chose que nous ne verrons pas dans cette initiation.</dd><dt>npm start</dt><dd>La plus importante, celle qui lance le serveur de développement.</dd></dl><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>Le serveur de CRA utilise le port 3000, tout comme Ruby on Rails, par défaut, donc si l'on veut lancer les deux simultanément, pensez à change le port de RoR</p></div></div></div><p>En lançant <code class=\"language-bash\">npm start</code>, le serveur s'est lancé et notre application a dû s'ouvrir automatiquement dans notre navigateur (si ce n'est pas le cas, ouvrez un nouvel onglet dans votre navigateur et saisissez l'URL indiquée par la commande dans le terminal, normalement  <a href=\"http://localhost:3000\" target=\"_blank\">http://localhost:3000/ )</a></p><p>Il est maintenant temps de mettre enfin les mains dans le cambouis.</p>"},{"titles" : ["3. La ressource","3.2. Le rendering"],"content" : "<p>Jetons un coup d’œil au fichier <code>src/index.js</code> et tout particulièrement à la ligne 7.</p><pre><code class=\"language-javascript\">ReactDOM<coord>.</coord>render(&lt;<coord>App</coord> /&gt;, <reserved>document</reserved><coord>.</coord>getElementById(<string>'root'</string>));</code></pre><p>On remarque que l'on utilise la méthode <code>render</code> du module <code>ReactDOM</code> et c'est par elle que l'on insère l'application React dans le code HTML. Elle prend deux paramètres, l'élément à insérer, ici le composant App, écrit en JSX, et la zone de destination, ici l'élément du DOM ayant l'id \"root\" (qui correspond à la balise <code>main</code> de <code>public/index.html</code>)</p>Voilà, c'est aussi simple que cela d’insérer une application React.js dans un fichier HTML.<ul><li>On importe ReactDOM (et React, pour le JSX soit compris)</li><li>On utilise la méthode render en indiquant l'élément à insérer et la cible</li><li>Et vogue la galère&nbsp;!</li></ul>"},{"titles" : ["3. La ressource","3.3. Les composants"],"content" : "<p>Depuis le temps que l'on en parle, il est temps de se pencher sur le cœur d'une application React&nbsp;: <strong>les composants.</strong></p><p>Ce sont des sous-parties de celle-ci. Elle prennent des propriétés en entrée, que l'on appelle <strong>props</strong> et retourne un élément du DOM virtuel.</p><p>Ils sont séparés en deux types&nbsp;: <strong>Les <em>\"stateless functional components\"</em></strong> et <strong>les composants-classes.</strong></p><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>Un composant React doit être un élément, pouvant avoir une infinité d'element-enfants. En effet, le code suivant retournera une erreur</p><pre><code class=\"language-html\">&lt;<coord>p</coord>&gt;un paragraphe&lt;/<coord>p</coord>&gt;\n&lt;<coord>p</coord>&gt;un autre paragraphe&lt;/<coord>p</coord>&gt;</code></pre><p>alors que ceci est une composant valide</p><pre><code class=\"language-html\">&lt;<coord>div</coord>&gt;\n\t&lt;<coord>p</coord>&gt;un paragraphe&lt;/<coord>p</coord>&gt;\n\t&lt;<coord>p</coord>&gt;un autre paragraphe&lt;/<coord>p</coord>&gt;\n&lt;/<coord>div</coord>&gt;</code></pre></div></div></div>"},{"titles" : ["3. La ressource","3.3. Les composants", "3.3.1 Les \"stateless functional components\""],"content" : "<p>React permet de définir des composants à l’aide d’une simple fonction. Ceux-ci, nommés \"composant pur fonctionnel\" ou \"stateless functional component\", représentent le plus souvent <strong>la grande majorité des composants d'une application.</strong>React ne suit pas le modèle MVC, mais les composants fonctionnels pourraient être assimilés à des vues. Ils prennent en entrée des props, définies par un ensemble de clés/valeurs, comprises dans un objet, et retourne un élément du DOM virtuel React, qui sera soit rendu  directement par ReactDOM.render, soit inclus dans la hiérarchie du DOM virtuel.</p><p>Basiquement, ce type de composant se créée ainsi&nbsp:</p><pre><code class=\"language-javascript\"><reserved>function</reserved> <prop>SimpleComponent</prop>(){\n\t<coord>return</coord> React<coord>.</coord>createElement(<string>\"p\"</string>, {}, <string>\"Je suis un élément paragraphe.\"</string>)\n}\n\nReactDOM<coord>.</coord>render(SimpleComponent(), <reserved>document</reserved><coord>.</coord>getElementById(<string>\"root\"</string>));</code></pre><p>Le premier argument est le nom du composant. Dans notre exemple il s'agit d’une String et non d’une référence à une fonction ou classe JavaScript. React déduira donc qu’il s’agit d’un type d’élément fourni nativement par la plate-forme, à savoir le navigateur. Le second argument est lui une série d’attributs (par exemple id, className, etc...). Enfin, le dernier est le contenu, ici un simple texte.</p><p>Pour un composant avec props, cela donne&nbsp;:</p><pre><code class=\"language-javascript\"><reserved>function</reserved> <prop>ComponentWithProps</prop>({<var>background</var>, <var>color</var>}) {\n\t<coord>return</coord> React<coord>.</coord>createElement(<string>\"p\"</string>, {<string>style</string><reserved>:</reserved> {<string>backgroundColor</string><reserved>:</reserved> background, <string>color</string><reserved>:</reserved> color}}, <string>\"Je suis un paragraphe stylisé.\"</string>)\n}\n\nReactDOM<coord>.</coord>render(ComponentWithProps({<string>background<reserved>:</reserved>\"blue\"</string>, <string>color<reserved>:</reserved>\"red\"</string>}), <reserved>document</reserved><coord>.</coord>getElementById(<string>\"root\"</string>));</code></pre>"},{"titles" : ["3. La ressource","3.3. Les composants", "3.3.2 Les Composants-classes"],"content" : "<p>Les composants fonctionnels, c'est bien beau, mais cela atteint vite ses limites lorsqu'on essaye de faire quelque chose de plus complexe que simplement afficher quelque chose sur la page, par exemple si on veut faire persister des données, interagir avec une API ou intégrer des règles métiers, qui vont plus loin qu'un simple rendu. Et pour cela, il faut passer par les composants-classes.</p><div class=\"card box-shadow-0 border-success\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">📚 INSTANT CULTURE GÉ</h5><p>Dans des ressources plus anciennes, comme l'un des livres de la section \"Pour aller plus loin\", il peut être fait référence à un manière de créer les classes antérieure à la démocratisation des classes ES6&nbsp;: <code>React.createClass</code>.<p><p>Cette manière est aujourd'hui totalement dépréciée. Et il est à noter que les méthodes y étaient <em>auto-bound</em> et que <code>this</code> y désignait automatiquement l'instance de la classe. Chose fort commode, certes, mais au prix d'une perte non négligeable de performances.</p></div></div></div><p>Un composant-classe se créer comme suit, avec les classes ES6</p><pre><code class=\"language-javascript\"><reserved>class</reserved> <prop>SuperComponent</prop> <reserved>extends</reserved> React<coord>.</coord>Component {\n\tconstructor(props) {\n\t\t<var>super</var>(props)\n\t\t<var>this</var><coord>.</coord>first <coord>=</coord> props<coord>.</coord>.first\n\t\t<var>this</var><coord>.</coord>last <coord>=</coord> props<coord>.</coord>last\n\t}\n\n\n\tfullname() {\n\t\t<coord>return `${</coord><var>this</var><coord>.</coord>first<coord>} ${</coord><var>this</var><coord>.</coord>last<coord>}`</coord>\n\t}\n\n\n\trender() {\n\t\t<coord>return</coord> (\n\t\t\t&lt;<coord>div</coord>&gt;\n\t\t\t\t&lt;<coord>p</coord>&gt;Salut <coord>{</coord><var>this</var><coord>.</coord>fullname()<coord>}</coord>&lt;/<coord>p</coord>&gt;\n\t\t\t\t&lt;<coord>SimpleComponent</coord> /&gt;\n\t\t\t\t&lt;<coord>ComponentWithProps</coord>\n\t\t\t\t\t<prop>background</prop><coord>=</coord><string>\"purple\"</string>\n\t\t\t\t\t<prop>color</prop><coord>=</coord><string>\"gold\"</string>\n\t\t\t\t/&gt;\n\t\t\t&lt;/<coord>div</coord>&gt;\n\t\t)\n\t}\n}</code></pre><p>L'usage du mot-clé <code>class</code> permet de créer des objets dont la syntaxe est plus proche de nombre de langage. On profite même de l’héritage grâce à <code>extends</code></p><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>Si une classe hérite d'une autre, comme c'est le cas des composants, qui hérite de React.Composant, il est impératif de commencer son constructeur en appelant celui de la classe-mère, via <code>super(...)</code>, sinon le code sera invalide et ne fonctionnera pas.</p></div></div></div>"},{"titles" : ["3. La ressource","3.3. Les composants", "3.3.3 Les imports et exports"],"content" : "<p>React.js profite grandement du système d'import, apparu dans les versions récentes de JavaScript. Tous les composants invoquent React, voire ReactDOM s'ils doivent rendre quelque chose dans la page, leurs composants-enfants, les éventuelles règles CSS qui leur sont liées et certains modules essentiels tel que PropTypes, que nous verrons plus tard.</p><h5>Les exports</h5><p>Avant de pouvoir invoquer un composant, il faut l'exporter. Pour cela, il y a quelques règles.</p><ul><li>Le mot-clé <code>export</code> permet d'exporter des éléments.</li><li>les mots-clés <code>export default</code> permettent d'exporter un élément par défaut du composant. Il ne peut n'y avoir qu'un seul import par défaut par fichier.</li><li>L'export peut être déclaré à la création de l'élément, <code>export function myFunction</code> ou <code>export class MyClass</code>, ou après sa création, <code>export default myFunction</code>. Sauf pour l'importation par défaut des composants fonctionnels créés comme des variables, qui ne peux se faire qu'après la création.</li></ul><h5>Les imports</h5><ul><li>Il n'est pas nécessaire d'indiquer l'extension pour les fichiers .js</li><li>Il est standardisé que les modules commençant par une minuscule soient issus de la bibliothèque React et ceux avec une majuscule soient les modules personnalisés, soient les composants. <code>import React from 'react';</code> et <code>import Chapter from './Chapter';</code></li><li>Les elements à importer sont invoqués entre accolades, sauf ceux par défaut. Par exemple <code>import {Component} from 'react'</code> / <code>import React from 'react'</code></li><li>Le mot-clé <code>as</code> permet de fixer un alias pour un module importé&nbsp;: <code>import {Component as c} from 'react'</code></li></ul><div class=\"card box-shadow-0 border-info\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">🚀 ALERTE BONNE ASTUCE</h5><pre><code class=\"language-javascript\"><coord>import</coord> React, {Component <coord>as</coord> c} <coord>from</coord> <string>'react'</string>\n\n<coord>export default</coord> <reserved>class</reserved> <prop>MyClass</prop> <reserved>extends</reserved> c {...</code></pre><p> est un bon moyen de déclarer un composant-classe.</p></div></div></div>"},{"titles" : ["3. La ressource","3.4. Le JSX"],"content" : "<p>Nous avons vu que, pour créer des composants, nous pouvons utiliser <code>React.createElement</code>, mais cette solution devient rapidement verbeuse et il devient difficile de repérer les données importantes. C'est pour cela, qu'il est préférable d'utiliser la syntaxe JSX,créée spécifiquement pour React. Prenons, par exemple</p><pre><code class=\"language-javascript\">React<coord>.</coord>createElement(<string>\"div\"</string>, {className <coord>=</coord> <string>\"container\"</string>},\n\tReact<coord>.</coord>createElement(<string>\"h1\"</string>, {className <coord>=</coord> <string>\"text-center\"</string>}, <coord>`${</coord>title<coord>}`</coord>,\n\tReact<coord>.</coord>createElement(Controls, {\n\t\tprevious <coord>= `${</coord><var>this</var><coord>.</coord>previousArticle<coord>}`</coord>\n\t\tnext <coord>= `${</coord><var>this</var><coord>.</coord>nextArticle<coord>}`</coord>\n\t\trank <coord>= `${</coord><var>this</var><coord>.</coord>rank()<coord>}`</coord>\n\t\tmenu <coord>= `${</coord><var>this</var><coord>.</coord>infoMenu()<coord>}`</coord>\n\t\tcurrentArticle <coord>= `${</coord>current<coord>}`</coord>\n\t\tchangeOption <coord>= `${</coord><var>this</var><coord>.</coord>selectArticle<coord>}`</coord>\n\t},<string>\"\"</string>),\n\tReact<coord>.</coord>createElement(<string>\"article\"</string>, {className<coord>=</coord><string>\"card\"</string>},\n\t\t<coord>`${</coord>titleElm<coord>}`</coord>,\n\t\tReact<coord>.</coord>createElement(<string>\"div\"</string>, {\n\t\t\tdangerouslySetInnerHTML<coord>=`${</coord>{<string>__html</string><reserved>:</reserved> content}<coord>}`</coord>\n\t\t}, <string>\"\"</string>)\n\t),\tReact<coord>.</coord>createElement(Controls, {\n\t\tprevious <coord>= `${</coord><var>this</var><coord>.</coord>previousArticle<coord>}`</coord>\n\t\tnext <coord>= `${</coord><var>this</var><coord>.</coord>nextArticle<coord>}`</coord>\n\t\trank <coord>= `${</coord><var>this</var><coord>.</coord>rank()<coord>}`</coord>\n\t\tmenu <coord>= `${</coord><var>this</var><coord>.</coord>infoMenu()<coord>}`</coord>\n\t\tcurrentArticle <coord>= `${</coord>current<coord>}`</coord>\n\t\tchangeOption <coord>= `${</coord><var>this</var><coord>.</coord>selectArticle<coord>}`</coord>\n\t},<string>\"\"</string>)\n)</code></pre><p>ce qui donne ceci en JSX</p><pre><code class=\"language-jsx\">&lt;<coord>div</coord> <prop>className</prop><coord>=</coord><string>\"container\"</string>&gt;\n\t&lt;<coord>h1</coord> <prop>className</prop> <coord>=</coord> <string>\"text-center\"</string>&gt;<coord>{</coord>title<coord>}</coord>&lt;/<coord>h1</coord>&gt;\n\t&lt;<coord>Controls</coord>\n\t\t<prop>previous</prop> <coord>= {</coord><var>this</var><coord>.</coord>previousArticle<coord>}</coord>\n\t\t<prop>next</prop> <coord>= {</coord><var>this</var><coord>.</coord>nextArticle<coord>}</coord>\n\t\t<prop>rank</prop> <coord>= {</coord><var>this</var><coord>.</coord>rank()<coord>}</coord>\n\t\t<prop>menu</prop> <coord>= {</coord><var>this</var><coord>.</coord>infoMenu()<coord>}</coord>\n\t\t<prop>currentArticle</prop> <coord>= {</coord>current<coord>}</coord>\n\t\t<prop>changeOption</prop> <coord>= {</coord><var>this</var><coord>.</coord>selectArticle<coord>}</coord>\n\t/&gt;\n\t&lt;<coord>article</coord> <prop>className</prop> <coord>=</coord> <string>\"card\"</string>&gt;\n\t\t<coord>{</coord>titlesElm<coord>}</coord>\n\t\t&lt;<coord>div</coord> <prop>dangerouslySetInnerHTML</prop> <coord>= {</coord>{<string>__html</string><reserved>:</reserved> content}<coord>}</coord> /&gt;\n\t&lt;/<coord>article</coord>&gt;\n\t&lt;<coord>Controls</coord>\n\t\t<prop>previous</prop> <coord>= {</coord><var>this</var><coord>.</coord>previousArticle<coord>}</coord>\n\t\t<prop>next</prop> <coord>= {</coord><var>this</var><coord>.</coord>nextArticle<coord>}</coord>\n\t\t<prop>rank</prop> <coord>= {</coord><var>this</var><coord>.</coord>rank()<coord>}</coord>\n\t\t<prop>menu</prop> <coord>= {</coord><var>this</var><coord>.</coord>infoMenu()<coord>}</coord>\n\t\t<prop>currentArticle</prop> <coord>= {</coord>current<coord>}</coord>\n\t\t<prop>changeOption</prop> <coord>= {</coord><var>this</var><coord>.</coord>selectArticle<coord>}</coord>\n\t/&gt;\n&lt;/<coord>div</coord>&gt;</code></pre><p>Un brin plus lisible et compréhensible, non ?</p>"},{"titles" : ["3. La ressource","3.4. Le JSX", "3.4.1 Les règles du JSX"],"content" : "<p>Le JSX, étant un langage à balises, partage quelques similarités avec le XML et l'HTML, mais présente aussi des différences notables.</p><h5>La sensibilité à la casse</h5><p>En JSX, les majuscules et minuscules ne sont pas interchangeables. Par exemple, la prop <em>nbVisitors</em> n'est pas identique à <em>nbvisitors</em>.</p><p>Ce fait est d'autant plus important pour les éléments. S'il commence par une minuscule, le moteur considéra qu’il s’agit d’un élément natif fourni par la plate-forme (le navigateur, par exemple), alors que s'il commence par un majuscule, il estimera qu'il a affaire à un composant. En comparant le JSX à la version <code>.createElement</code>, cela est plus flagrant.</p><pre><code class=\"language-javascript\">&lt;<coord>simpleComponent</coord>/&gt;\t<reserved>=></reserved>\tReact<coord>.</coord>createElement(<string>'simpleComponent'</string>, <bool>null</bool>)\n&lt;<coord>SimpleComponent</coord>/&gt;\t<reserved>=></reserved>\tReact<coord>.</coord>createElement(SimpleComponent, <bool>null</bool>)</code></pre><p>Dans le premier cas, on produit juste un String qui donne le nom de la balise supposée native, alors que dans le second cas, on référence bien le composant React supposé</p><h5>La fermeture des balises</h5><p>Toutes les balises doivent être fermées, même les balises uniques, donc pas d'<code>&lt;input&gt;</code> mais <code>&lt;input /&gt;</code></p><p>Et à l'instar du XML et de l'HTML, on ferme les balises dans l'ordre d'ouverture.</p><pre><code class=\"language-jsx\">&lt;<coord>p</coord>&gt;&lt;<coord>span</coord>&gt;Bien&lt;/<coord>span</coord>&gt;&lt;/<coord>p</coord>&gt;\n&lt;<coord>p</coord>&gt;&lt;<coord>span</coord>&gt;Pas bien&lt;/<coord>p</coord>&gt;&lt;/<coord>span</coord>&gt;</code></pre><h5>La déclaration des props</h5><p>Une prop peut avoir n'importe quelle valeur admise en JavaScript, mais le JSX es plus manichéen, soit c'est un string, matérialisé par les double-quotes \"\", soit c'est une expression JSX, définie entre accolades{}</p><pre><code class=\"language-javascript\">&lt;<coord>input</coord>\n\t<prop>type</prop> <coord>=</coord> <string>\"email\"</string>\n\t<prop>name</prop> <coord>=</coord> <string>\"email\"</string>\n\t<prop>maxlength</prop> <coord>= {</coord><bool>42</bool><coord>}</coord>\n\t<prop>readonly</prop> <coord>= {</coord><bool>false</bool><coord>}</coord>\n\t<prop>onChange</prop> <coord>= {</coord><var>this</var><coord>.</coord>handleFieldChange<coord>}</coord>\n\t<prop>value</prop> <coord>= {</coord><var>this</var><coord>.</coord>state.value<coord>}</coord>\n/&gt;</code></pre><p>Il est a noté que l'expression JSX conserve le type réel de la prop, et que lorsqu'elle est récupérée, on a bien un nombre, un booléen, un tableau, un autre composant, etc...</p><h5><code>true</code></h5><p>Tout comme en HTML, lorsque la valeur d'une prop booléenne est <code>true</code>, on peut se contenter d'écrire le nom de la prop, ce qui d'ailleurs la syntaxe recommandée.</p><pre><code class=\"language-html\">&lt;<coord>input</coord> <prop>type</prop><coord>=</coord><string>\"email\"</string> <prop>name</prop><coord>=</coord><string>\"email\"</string> <prop>autoFocus required</prop> /&gt;</code></pre><h5>Commentaires</h5><p>JSX ne possède pas syntaxe dédiée pour les commentaires. Pour se faire, il faut inclure des commentaires multi-lignes JS (/*...*/) dans une expression JSX.</p><pre><code class=\"language-jsx\">&lt;<coord>div</coord> <prop>className</prop><coord>=</coord><string>\"container\"</string>&gt;\n\t&lt;<coord>h1</coord> <prop>className</prop><coord>=</coord><string>\"text-center\"</string>&gt;<coord>{</coord>title<coord>}</coord>&lt;/<coord>h1</coord>&gt;\n\t{<com>/* Les controles ont été déclarés au préalable dans une variable pour eviter d'alourdir la grappe JSX */</com>}\n\t{control}\n\t&lt;<coord>Chapter</coord> <prop>elm</prop><coord>={</coord>elm<coord>}</coord> /&gt;\n\t{control}\n&lt;/<coord>div</coord>&gt;</code></pre>"},
{
    "titles" : ["3. La ressource","3.5. Les props"],
    "content" : "Blabla"
},
{
    "titles" : ["3. La ressource","3.X. Deuxième sous-partie du contenu"],
    "content" : "Blabla"
},
{
    "titles" : ["3. La ressource","3.X. Deuxième sous-partie du contenu"],
    "content" : "Blabla"
},
{
    "titles" : ["3. La ressource","3.X. Deuxième sous-partie du contenu"],
    "content" : "Blabla"
},
{
    "titles" : ["3. La ressource","3.X. Deuxième sous-partie du contenu"],
    "content" : "Blabla"
},
        {
            "titles" : ["3. La ressource","3.X. L'état local"],
            "content" : "<p>Les props sont parfaites pour paramétrer l'apparence et le fonctionnement des composants. Mais celles-ci étant immuables, un autre mécanisme est nécessaire pour refléter les modifications liées à l'usage de l'application, qu'elles viennent de de son déroulement, une horloge ou des animations pré-programmées, par exemple, ou l'interaction avec l'utilisateur, qui navigue, clique, remplie des formulaire, etc... . L'option native de React pour cela est l'état local.</p><p>L'état local permet tout à la fois de garder en mémoire des valeurs qui évoluent entre les rendus et de déclencher des rendus lorsqu'il change. Il est à noter que seuls les composants affectés par ces changements sont ré-rendus, pour un gain de performance.</p>"
        },
        {
            "titles" : ["3. La ressource","3.X. L'état local", "3.X.1. this.state"],
            "content" : "<p>Les composants fonctionnels étant nommés <em>stateless functional components</em>, il est une évidence que l'état local ne doit pas y être déclaré. Ce qui signifie que sa valeur est obligatoirement définie dans un composant-classe.</p><p>Il possède une valeur par défaut de <code>null</code>, il faudra donc le plus souvent l’initialiser manuellement dans le constructeur, soit de manière explicite :</p><pre><code class=\"language-javascript\"><reserved>class</reserved> <prop>App</prop> <reserved>extends</reserved> Component {\n\tconstructor(props) {\n\t\t<var>super</var>(props)\n\t\t<var>this</var><coord>.</coord>state <coord>=</coord> {<string>article</string><reserved>:</reserved> <bool>0</bool>}\t\n}\n\n\t<com>//...</com>\n\n}</code></pre><p>Ou, implicitement, par un initialiseur de champ&nbsp;:</p><pre><code class=\"language-javascript\"><reserved>class</reserved> <prop>App</prop> <reserved>extends</reserved> Component {\n\tstate <coord>=</coord> {<string>article</string><reserved>:</reserved> <bool>0</bool>}\n\n\t<com>//...</com>\n\n}</code></pre><p>On remarquera que <strong>l'état local est un objet littéral.</strong></p><h5>Accéder à l'état local</h5><p>Le seul composant à avoir accès à l'état local est celui dans lequel il est déclaré. Cela évite qu'il soit modifié par n'importe qui, mais cela nécessite de passer par un système d'ascenseur pour faire circuler les informations.</p><ul><li>Faire descendre les informations, via des props, jusqu’aux composants qui en ont besoin.</li><li>Faire remonter les demandes d'évolution depuis les composants, qui en sont responsables, jusqu'au composant possesseur de l'état local, via des méthodes de celui-ci, passées comme props.</li></ul><div class=\"card box-shadow-0 border-success\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">🎨 EXEMPLE ILLUSTRÉ</h5><p>Regardons comment fonctionne le menu déroulant de la présente application.</p><pre><code class=\"language-javascript\"><reserved>const</reserved> <prop>Menu</prop> <coord>=</coord> <reserved>function</reserved>({<var>infos</var>, <var>currentArticle</var>, <var>changeOption</var>}) {\n\t<coord>return</coord> (\n\t\t&lt;<coord>select</coord>\n\t\t\t<prop>value</prop> <coord>= {</coord>currentArticle<coord>}</coord>\n\t\t\t<prop>onChange</prop> <coord>= {</coord>changeOption<coord>}</coord>\n\t\t&gt;\n\t\t\t<coord>{</coord>infos.map(<var>option</var> <reserved>=&gt;</reserved>\n\t\t\t\t&lt;<coord>option</coord>\n\t\t\t\t\t<prop>key</prop> <coord>= {</coord>option.index<coord>}</coord>\n\t\t\t\t\t<prop>value</prop> <coord>= {</coord>option.index<coord>}</coord>\n\t\t\t\t&gt;\n\t\t\t\t\t<coord>{</coord>option.title<coord>}</coord>\n\t\t\t\t&lt;/<coord>option</coord>&gt;\n\t\t\t)<coord>}</coord>\n\t\t&lt;/<coord>select</coord>&gt;\n\t)\n}</code></pre><p>On peut noter que le menu ne possède aucune information propre, son contenu, son fonctionnement et sa valeur lui viennent de ses props. Il faut donc les chercher dans ses ancètres, ici le composant \"Controls\".</p><pre><code class=\"language-javascript\"><coord>import</coord> course <coord>from</coord> <string>\"./course.json\"</string>\n\n<reserved>class</reserved> <prop>Controls</prop> <reserved>extends</reserved> Component {\n\tconstructor(props) {\n\t\t<var>super</var>(props)\n\t\t<var>this</var><coord>.</coord>state <coord>=</coord> { <string>article</string><reserved>:</reserved> <bool>0</bool> }\n\t}\n\n\t<com>/* ... */</com>\n\n\tinfoMenu() {\n\t\t<reserved>const</reserved> {chapters} <coord>=</coord> course\n\n\t\t<coord>return</coord> chapters.map(\n\t\t\t(<var>chapter</var>, <var>index</var>) <reserved>=></reserved> ({\n\t\t\t\t<string>rank</string> <reserved>:</reserved> chapter<coord>.</coord>titles<coord>.</coord>length<coord>-</coord><bool>1</bool>,\n\t\t\t\t<string>title</string> <reserved>:</reserved> chapter<coord>.</coord>titles[chapter<coord>.</coord>titles<coord>.</coord>length<coord>-</coord><bool>1</bool>],\n\t\t\t\t<string>index</string> <reserved>:</reserved> index\n\t\t\t })\n\t\t)\n\t}\n\n\t<com>/* Arrow function for \"this\" binding */</com>\n\t<prop>selectArticle</prop> <coord>=</coord> (<var>e</var>) <reserved>=></reserved> { <var>this</var><coord>.</coord>setState({<string>article</string><reserved>: parseInt</reserved>(e<coord>.</coord>target<coord>.</coord>value)})}\n\n\trender() {\n\t\t<coord>return</coord> (\n\t\t\t&lt;<coord>div</coord> <prop>className</prop> <coord>=</coord> <string>\"controls\"</string>&gt;\n\t\t\t\t&lt;<coord>div</coord>&gt; <com>/*...*/</com> &lt;/<coord>div</coord>&gt;\n\t\t\t\t&lt;<coord>Menu</coord>\n\t\t\t\t\t<prop>infos</prop> <coord>= {</coord><var>this</var><coord>.</coord>infoMenu()<coord>}</coord>\n\t\t\t\t\t<prop>currentArticle</prop> <coord>= {</coord><var>this</var><coord>.</coord>state<coord>.</coord>article<coord>}</coord>\n\t\t\t\t\t<prop>changeOption</prop> <coord>= {</coord><var>this</var><coord>.</coord>selectArticle<coord>}</coord>\n\t\t\t\t/&gt;\n\t\t\t\t&lt;<coord>div</coord>&gt; <com>/*...*/</com> &lt;<coord>div</coord>&gt;\n\t\t\t&lt;/<coord>div</coord>&gt;\n\t\t)\n\t}\n}</code></pre><p>On peut remarquer que les contrôles gèrent eux-même l'option du Menu sélectionné, via la variable d'état locale \"article\", mais que la mise à jour passe par l'usage de la méthode <code>setState()</code>, que nous allons voir dans le prochain chapitre.</p></div></div></div>"
        },
        {
            "titles": ["3. La ressource","3.X. L'état local", "3.X.1. this.setState"],
            "content" : "<p>La méthode <code>this.setState</code> est le moyen de modifier l'état local. Elle est déclarée dans le composant contenant l'état qu'elle modifie et prend en paramètre un objet littéral contenant les modifications à apporter.</p><pre><code class=\"language-javascript\"><var>this</var><coord>.</coord>setState({ <string>open</string><reserved>:</reserved> <bool>true</bool> }) <com>// modifie uniquement cette propriété</com></code></pre><p>Son appel provoque un <code>render</code> de l'application, mais seulement des composants impactés par les modifications, ce qui est bien plus performant que si c'était toute l'application qui l'était à chaque fois.</p><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>Si on oublie l'aspect \"différentiel\", on peut arriver au code suivant, où l'on voudrait remettre à zéro les champs d'un formulaire.</p><pre><code class=\"language-javascript\"><reserved>class</reserved> <prop>Form</prop> <reserved>extends</reserved> Component {\n\tconstructor(props) {\n\t\t<var>super</var>(props)\n\t\t<var>this</var><coord>.</coord>state <coord>=</coord> { <string>name<reserved>:</reserved> '', target<reserved>:</reserved> <bool>5</bool>, units<reserved>:</reserved> ''</string> }\n\t}\n\n\t<com>// …</com>\n\n\tresetForm() {\n\t\t<var>this</var><coord>.</coord>setState({}) <com>// L'état local, au lieu d'être réinitialisé, reste en fait tel quel.</com>\n\t}\n}</code></pre></div></div></div><div class=\"card box-shadow-0 border-info\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">🚀 ALERTE BONNE ASTUCE</h5><p>Le meilleur moyen de réinitialiser l'état est de passer par une constante globale.<pre><code class=\"language_javascript\"><reserved>const</reserved> DEFAULT_STATE <coord>=</coord> { <string>name<reserved>:</reserved> '', target<reserved>:</reserved> <bool>5</bool>, units: '' </string>}\n\n<reserved>class <prop>Form</prop> extends</reserved> Component {\n\tconstructor(props) {\n\t\t<var>super</var>(props)\n\t\t<var>this</var><coord>.</coord>state <coord>=</coord> { <coord>...</coord>DEFAULT_STATE }\n\t}\n\n\t<com>// …</com>\n\n\tresetForm() {\n\t\t<var>this</var><coord>.</coord>setState(DEFAULT_STATE)\n\t}\n}</code></pre></p></div></div></div><h5><code>this.setState</code> est asynchrone</h5><p>Un autre aspect fondamental de <code>setState()</code> : il est asynchrone. Voici un exemple d’utilisation naïve qui ne fonctionnera pas du tout :</p><pre><code class=\"language-javascript\">doSomethingWrong() {\n\t<com>// this.state.open est `false`</com>\n\t<var>this</var><coord>.</coord>setState({ <string>open</string><reserved>:</reserved> <bool>true</bool> })\n\t<reserved>console<coord>.</coord>log</reserved>(<var>this</var><coord>.</coord>state<coord>.</coord>open <coord>===</coord> <bool>true</bool>) <com>// `false` : pas encore…</com>\n}\n\ndoSomethingSuperWrong() {\n\t<com>// this.state.count == 0</com>\n\t<var>this</var><coord>.</coord>setState({ <string>count</string><reserved>:</reserved> <var>this</var><coord>.</coord>state<coord>.</coord>count <coord>+</coord> <bool>1</bool> })\n\t<var>this</var><coord>.</coord>setState({ <string>count</string><reserved>:</reserved> <var>this</var><coord>.</coord>state<coord>.</coord>count <coord>+</coord> <bool>1</bool> })\n\t<var>this</var><coord>.</coord>setState({ <string>count</string><reserved>:</reserved> <var>this</var><coord>.</coord>state<coord>.</coord>count <coord>+</coord> <bool>1</bool> })\n\t<reserved>console<coord>.</coord>log</reserved>(<var>this</var><coord>.</coord>state<coord>.</coord>count) <com>// 0</com>\n\t<com>// Et même une fois pris en compte, ce sera 1, pas 3, vu que tout le long de cette méthode, `this.state.count` valait 0.</com>\n}</code></pre><p>Comme souvent avec React, le choix de l'asynchronisme vient d'un soucis de performance. Cela nous permet d’appeler <code>this.setState()</code> à de multiples occasions, avec des modifications diverses et variées, sans ralentir le système, avant de fusionner les demandes et de les appliquer au prochain rendu.</p><p>Pour contourner les problèmes liés à cette nature asynchrone, on l’appellera avec une fonction en paramètre. Celle-ci prend deux arguments : l'état d'avant, qui prend en compte toutes les demandes de changement déjà exprimées, et les props du composant. Et elle renvoie un objet qui sera traité comme celui passé jusqu’ici : une série de modifications à apporter à l’état.</p><p>Ainsi pour reprendre notre exemple d'incrémentation&nbsp:</p><pre><code>doSomethingRight() {\n\n\t<com>// this.state.count vaut 0</com>\n\t<var>this</var><coord>.</coord>setState(\n\t\t(<var>prevState</var>, <var>props</var>) <reserved>=></reserved> ({ <string>count</string><reserved>:</reserved> prevState<coord>.</coord>count <coord>+</coord> props<coord>.</coord>inc })\n\t)\n\n\t<var>this</var><coord>.</coord>setState(\n\t\t(<var>prevState</var>, <var>props</var>) <reserved>=></reserved> ({ <string>count</string><reserved>:</reserved> prevState<coord>.</coord>count <coord>+</coord> props<coord>.</coord>inc })\n\t)\n\n\t<var>this</var><coord>.</coord>setState(\n\t\t(<var>prevState</var>, <var>props</var>) <reserved>=></reserved> ({ <string>count</string><reserved>:</reserved> prevState<coord>.</coord>count <coord>+</coord> props<coord>.</coord>inc })\n\t)\n}</code></pre>"
        },
        {
            "titles" : ["3. La ressource","3.X. La mise en production"],
            "content" : "<p>Maintenant que nous savons faire une application React.js qui se tient, il est temps d'en faire profiter le monde, sinon elle n'aura pas grand intérêt.</p><p>Pour cela, nous allons voir deux moyens&nbsp:</p><ul><li>Sur un serveur distant</li><li>Via Heroku</li></ul>"
        },
        {
            "titles" : ["3. La ressource","3.X. La mise en production", "3.X.1. Sur un serveur distant"],
            "content" : "<p>En l'état, l'application ne peux pas être passée en production, les clients seraient incapable de la lire. Donc on va demande à CRA de créer un build de production, grâce à la commande :</p><pre><code class=\"language-bash\"></code>$ npm run build</code></pre><p>Il suffit de déposer le dossier <code>build</code>, ainsi créé, dans le dépot distant pour que l'application soit fonctionnelle.<div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h5><p>Si l'application n'est pas placée à la racine du site, il va y avoir un problème avec les chemins de chargement des fichiers. Pour éviter cela, il suffit d'ajouter la ligne suivante au fichier <code>package.json</code>, avant de lancer la création du build de production.</p><pre><code class=\"language-javascript\">\"homepage\": \".\"</code></pre><p>Cela permettra de générer des routes relative à partir du fichier <code>index.html</code> et non plus la racine du site.</p></div></div></div>"
        },
        {
            "titles": ["3. La ressource","3.X. La mise en production", "3.X.2. Sur Heroku"],
            "content" : "<p>La mise en production sur Heroku est tout aussi simple.</p><p>Il faut tout d'abord indiquer à l'application sous quels moteurs elle fonctionne. Pour le savoir, tapez dans le terminal</p><pre><code class=\"language-bash\">$ node -v\nv10.15.3\n\n$ npm -v\n6.9.0</code></pre><p>Puis de reporter ces informations dans le <code>package.json</code>, avec les lignes suivantes&nbsp;:</p><pre><code class=\"language-javascript\">\"engines\": {\n\t\"npm\" : \"VERSION_DE_NPM\",\n\t\"node\" : \"VERSION_DE_NODE\"\n}</code></pre><p>Après, on créé le dépôt distant&nbsp;:</p><pre><code class=\"language-bash\">$ heroku create $APP_NAME --buildpack github.com/mars/create-react-app-buildpack.git</code></pre><p>L'option <code>--buildpack github.com/mars/create-react-app-buildpack.git</code> permet au serveur Heroku de créer automatiquement un build de production.</p><p>Enfin, comme on le ferait avec une application Rails, on pousse le code.</p><div class=\"card box-shadow-0 border-info\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h5 class=\"card-title\">🚀 ALERTE BONNE ASTUCE</h5><p>Pour gagner du temps, vous pouvez ajouter les deux lignes suivantes dans le fichier de configuration de votre terminal.</p><pre><code class=\"language-bash\">alias gshm=\"git push heroku master\"<br/>alias glhm=\"git pull heroku master\"</code></pre></div></div></div>"
        },
        {
            "titles" : ["4. Points importants à retenir"],
            "content" : "La partie précédente explique de manière exhaustive la ressource. Cette partie est le \"récapitulatif à emporter avec soi\". Quels sont les points importants à retenir ? Quel est le strict minimum de la ressource à garder pour la faire marcher ? C'est ici que cela se passe."
        },
        {"titles" : ["5. Pour aller plus loin"],"content" : "<p>Voici quelques liens pour aller plus loin dans le monde de React&nbsp;:</p><ul><li>Le cours de Christophe PORTENEUVE, sur OpenClassrooms, aborde certains concepts plus avancés, comme <a href=\"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664881-apprivoisez-le-cycle-de-vie-des-composants\" target=\"_blank\">le cycle de vie d'un composant</a>, <a href=\"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664886-simplifiez-votre-gestion-des-valeurs-et-evenements\" target=\"_blank\">la gestion des formulaires</a> et <a href=\"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664906-decouvrez-les-tests-automatises\" target=\"_blank\">les tests automatisés</a>, qui profitent d'une partie complète.</li><li>Deux articles de <a href=\"https://learnetto.com/blog/3-ways-to-use-react-with-ruby-on-rails-5\" target=\"_blank\">Hrishi MITTAL</a> et de <a href=\"https://www.zaratan.fr/posts/migrate_from_erb_to_react/\" target=\"_blank\">Denis Pasin/a> expliquent comment combiner <strong>React</strong> et <strong>Ruby on Rails</strong>.</li><li><a href=\"books/reactjs.pdf\" target=\"_blank\"/>Learning React</a> de Alex BANKS & Eve PORCELLO, certes un peu daté, traite dans son dernier tiers de l'externalisation de l'état local, grâce à la bibliothèque <strong>Redux</strong>.</li><li><a href=\"books/reactnative.pdf\" target=\"_blank\"/>Learning React Native</a> de Bonnie EISENMAN, permet d'apprendre à faire des applications iOS et Android natives en utilisant React.</li></ul>"}]}
