{"title" : "Initiation à React.js","chapters" : [{"titles" : ["1. Introduction"],"content": "<p>Depuis l’ancêtre <a href=\"https://jquery.com\" target=\"_blank\">Jquery</a> jusqu’à <a target=\"_blank\" href=\"https://vuejs.org\">Vue.js</a>, en passant par le classique <a target=\"_blank\" href=\"http://vanilla-js.com/\">VanillaJS<a href=\"#vanilla\"><sup>1</sup></a>, le JavaScript croule sous les frameworks, au point que cela est une plaisanterie dans le monde du développement. Dans ces conditions, comment en choisir un&nbsp;? Et tout particulièrement React.js.</p><p>Mais d'abord qu'est-ce qu'un framework front-end&nbsp;? Cela représente tout ensemble de classes, fonctions et utilitaires qui nous facilite la création d'applications riches pour les navigateurs (et, de plus en plus, pour les mobiles). En gérant les différences entre les navigateurs, ils permettent aux développeurs de se focaliser sur le plus important et de ne pas avoir réinventer la roue pour tous les besoins classiques de nos applications : gestion de l'interface utilisateur, des événements, du DOM, des formulaires, de l’évolution dans le temps des données manipulées par l'interface, etc.</p><p>Mais pourquoi choisir React.js&nbsp;?</p><ul><li>React est sans doute le framework front-end le plus populaire aujourd’hui</li><li>Ses bases sont assez simples à apprendre, car il se focalise sur le cœur du problème : la gestion de l’interface utilisateur.</li><li>Un fois, les bases connues, il est simple d'ajouter d'autres briques applicatives, comme le routage côté client, le stockage des données, etc..., via les autres éléments de son écosystème, comme <a target=\"_blank\" href=\"https://reacttraining.com/react-router/\">React-Router</a> ou <a href=\"http://redux.js.org/\" target=\"_blank\">Redux</a></li></ul><p id=\"vanilla\"><small><sup>1</sup>. Oui, c'est du JavaScript pur. Cela avait été développé pour se moquer de la recrudescence de frameworks.</small></p>"},{"titles" : ["2. Historique"],"content" : "<p>React a été crée par Jordan Walke, un ingénieur logiciel de Facebook, et déployé pour la première fois en 2011 sur Facebook, puis sur Instagram en 2012, avant de devenir, en 2013, un projet open-source, sous la licence MIT, mais toujours sous la houlette de Facebook.</p><p>Au travers de React.js et React Native,le moteur de rendu permettant de créer des applications natives sur Android et iOS présenté en 2015, nombre de \"gros sites\" utilise React&nbsp;: Airbnb, Dailymotion, Discord, Dropbox, Facebook évidemment, IMDb, Instagram, Netflix, Paypal, Tesla, Twitter, Wordpress, et des centaines d’autres en sont quelques exemples.</p><p>En 2017, React 360 a été présenté, permettant le développement VR avec React.</p>"},{"titles" : ["3. La ressource"],"content" : "<p>Avant de nous plonger plus en avant dans le fonctionnement de React.js, voyons les grands tenants de sa philosophie.</p><h5>Les composants</h5><p>Le web avait été conçu initialement pour des documents, et non pour des applications. Cela se ressentait dans le fonctionnement de HTML, de CSS et du DOM, dès lors que l'on essayait d'en créer une, ce qui aboutissait à un code incompréhensible, ardu à maintenir et à faire évoluer, bourré de bugs. React, à l'instar de ses concurrents visant à développer des applications, a choisi de s'éloigner de la séparation stricte entre la structure (HTML), l'aspect (CSS) et le comportement (JS), classiquement écrits dans des fichiers bien distincts au profit de composants liants les trois langages.</p><p>Le fait de rassembler dans un même fichier source ces trois volets, connectés par une syntaxe concise et familière (baptisée JSX, pour \"JavaScript as Xml\") facilite considérablement le développement. En effet, il est plus simple de retrouver les informations et de comprendre la logique dans des fichiers courts que dans des fichiers de plusieurs centaines de lignes. Par exemple, les règles CSS d'un composant sont inclues dans un fichier au nom du composant.</p><p>Le but des composants est d'être réutilisable et sont, pour la plupart, créés en combinant d’autres composants plus simples, faisant ainsi une arborescence, structurant l'interface.</p><h5>Données descendantes et changements montants</h5><p>Pour régler un problème principal des interfaces utilisateurs, à savoir la modification des données et les changements dans l'interface que cela provoque, React à choisi une politique simple. Chaque composant est le seul responsable des données envoyé à ses composants-enfants. Quant aux changements, ils remontent, depuis le composant responsable de ceux-ci, de composant parent en composant parent, jusqu’à atteindre un niveau suffisamment haut pour contenir tous les autres composants intéressés.</p><p>Le cœur de cela sont <strong>les props</strong> et <strong>l'état local</strong>, sur lesquels nous reviendrons plus longuement.</p><h5>Le DOM virtuel</h5>Au lieu de manipuler directement le DOM HMTL, React choisi de créer un <strong>DOM virtuel</strong>, qui est réconcilié avec le DOM du navigateur au moment du rendu. Outre l'amélioration nettes des performances, le principal avantage du DOM virtuel est son aspect multimédia. Il suffit de changer le moteur de rendu pour changer le contexte&nbsp;: navigateur, applications mobiles, réalité virtuelle, etc...</p><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h4 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h4><p>React s'appuie très lourdement sur <strong>l'ES6.</strong>  <a target=\"_blank\" href=\"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664806-modernisez-votre-javascript-avec-es2015\">Ce chapitre</a> vous permettra de vous rafraîchir les idées sur les changements que cela apporte.</p></div></div></div>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest"],"content" : "<p>Le meilleur moyen de créer une application React est de passer un outil du nom de Create-React-App. Il génère automatiquement le squelette applicatif et masque la complexité potentielle de configuration des briques techniques associées : gestion de JavaScript moderne (ES2015+), bundling de notre application (avec Webpack), serveur de développement, génération de fichiers de production optimisés, etc.</p><p>Pour pouvoir l’utiliser, cela nécessite un petit installfest.</p>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.1. Node"],"content" : "CRA est écrit en Node et nécessite Node 6+. Node.js est un environnement d'exécution JavaScript installable partout, qui permet d'écrire tout types de programmes, entre autre de faire le backend d’un site en javascript.</p><p>Node peut être installé de nombreuses façons. Commencez par ouvrir le terminal, pour vérifier si Node est déjà installé.</p><pre><code class=\"language-bash\">$ node --version\nv10.15.3</code></pre><p>Si vous obtenez un message d’erreur, ou un numéro de version antérieur assez éloigné de la version 10.15.3, qui est la version stable actuelle, vous êtes bon pour une petite session d’installation.<h5>MacOS</h5><p>Vous pouvez télécharger l’installateur sur <a href=\"https://nodejs.org/fr/#download\" target=\"_blank\">le site de Node.js</a> ou utiliser Homebrew<p><pre><code class=\"language-bash\">$ brew install node</code></pre><h5>Debian/Ubuntu/Mint</h5><pre><code class=\"language-bash\"># Ubuntu et ses distros filles\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$  sudo apt-get install -y nodejs\n\n# Debian, en tant que root\n$ curl -sL https://deb.nodesource.com/setup_10.x | bash -\n$ apt-get install -y nodejs</code></pre><p>Pour les autres distros, vous pouvez suivre <a href=\"https://nodejs.org/en/download/package-manager/\" target=\"_blank\">ce lien</a></p><p>Si Node est installé, mais que la version n'est pas à jour, <a href=\"https://www.hostingadvice.com/how-to/update-node-js-latest-version/\" target=\"_blank\">cet article</a> explique comment faire la mise-à-jour.</p>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.2. NPM"],"content" : "<p>NPM est le gestionnaire de modules de Node, utilisé pour de nombreux autres types de contenus. C’est à la fois un outil en ligne de commande (la commande  npm ) et un vaste catalogue de modules. La commande permet notamment d'installer et de mettre à jour les modules que l'on sélectionne pour nos projets.</p><p>NPM est livré avec node, mais il est sans doute préférable de le mettre à jour afin d'avoir la dernière version</p><pre><code class=\"language_bash\">$ sudo npm install npm@latest -g</code></pre><p>Vérifiez ensuite&ńbsp;:</p><pre><code class=\" language-bash\">$ npm --version\n6.9.0</code></pre>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.3. Create-React-App"],"content" : "<p>Enfin, nous allons pouvoir installer CRA. Le plus simple est par le terminal avec la commande suivante&nbsp;:</p><pre><code class=\"language-bash\">$ sudo npm install --global create-react-app</code></pre><p>Normalement, vous devriez avoir la dernière version en date, la 3.0.1.</p>"},{"titles" : ["3. La ressource","3.1. Create-React-App et l'Installfest","3.1.4. Créer notre première application React"],"content" : "<p>Voilà ! Il est temps à présent de créer notre première application React&nbsp;!</p><p>Placez-vous dans le dossier où vous voulez installer l'appli et utiliser la commande suivante&nbsp;:</p><pre><code class=\"language-bash\">$ create-react-app MONAPPLICATION</code></pre><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h4 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h4><p>Il se peut que le <code class=\"language-bash\">create-react-app</code> retourne des erreurs du type <code class=\"language-bash text-danger\">Unhandled rejection Error: EACCES: permission denied, open '/home/USER/.npm/_cacache/tmp/8c63fe0a'</code>, mais rien qu'un <code class=\"language-bash\">sudo</code> ne saurait régler.<p></div></div></div><div class=\"card box-shadow-0 border-info\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h4 class=\"card-title\">🚀 ALERTE BONNE ASTUCE</h4><p>Pour créer plus rapidement une application, ajouter la ligne suivante dans son fichier de configuration de son terminal.<pre><code class=\"language-bash\">alias CRA='create-react-app'</code></pre></p></div></div></div><p>Le dossier ainsi produit, contient déja pas mal de choses&nbsp;:<ul><li>Le dossier node_modules, où toutes les dépendances ont été installées</li><li>une page HTML (  public/index.html ), qui accueillera l'application</li><li>le point d’entrée de l’application ( src/index.js )</li><li> un premier composant (src/App.js ) avec ses styles à part et ses tests</li></ul><p>Seuls  src/index.js  et  public/index.html  sont exigés par CRA.  Tout le reste est à notre gré. Par exemple, vous pouvez supprimer le logo.svg, qui est utiliser par la page par défaut.<br/>Basiquement, nous ne travaillons quasiment que dans le dossier src/ où seront placés tous les fichiers sources (JS, CSS, test, etc.), afin qu'ils puissent être utilisés par le Webpack</p><p>Le message de fin de génération nous propose quatre commandes&nbsp;:</p><dl><dt>npm run build</dt><dd>Qui génère les fichiers pour la production</dd><dt>npm test</dt><dd>Qui lance la batterie de tests. (Sujet qui ne sera pas abordé par cette initiation)</dd><dt>npm run eject</dt><dd>Qui fait sortir l'application du contexte de CRA, chose que nous ne verrons pas dans cette initiation.</dd><dt>npm start</dt><dd>La plus importante, celle qui lance le serveur de développement.</dd></dl><div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h4 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h4><p>Le serveur de CRA utilise le port 3000, tout comme Ruby on Rails, par défaut, donc si l'on veut lancer les deux simultanément, pensez à change le port de RoR</p></div></div></div><p>En lançant <code class=\"language-bash\">npm start</code>, le serveur s'est lancé et notre application a dû s'ouvrir automatiquement dans notre navigateur (si ce n'est pas le cas, ouvrez un nouvel onglet dans votre navigateur et saisissez l'URL indiquée par la commande dans le terminal, normalement  <a href=\"http://localhost:3000\" target=\"_blank\">http://localhost:3000/ )</a></p><p>Il est maintenant temps de mettre enfin les mains dans le cambouis.</p>"},{"titles" : ["3. La ressource","3.2. Le rendering"],"content" : "<p>Jetons un coup d’œil au fichier <code>src/index.js</code> et tout particulièrement à la ligne 7.</p><pre><code class=\"language-javascript\">ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</code></pre><p>On remarque que l'on utilise la méthode <code>render</code> du module <code>ReactDOM</code> et c'est par elle que l'on insère l'application React dans le code HTML. Elle prend deux paramètres, l'élément à insérer, ici le composant App, écrit en JSX, et la zone de destination, ici l'élément du DOM ayant l'id \"root\" (qui correspond à la balise <code>main</code> de <code>public/index.html</code>)</p>Voilà, c'est aussi simple que cela d’insérer une application React.js dans un fichier HTML.<ul><li>On importe ReactDOM (et React, pour le JSX soit compris)</li><li>On utilise la méthode render en indiquant l'élément à insérer et la cible</li><li>Et vogue la galère&nbsp;!</li></ul>"},{"titles" : ["3. La ressource","3.3. Les composants"],"content" : "<p>Depuis le temps que l'on en parle, il est temps de se pencher sur le cœur d'une application React&nbsp;: <strong>les composants.</strong></p><p>Ce sont des sous-parties de celle-ci. Elle prennent des propriétés en entrée, que l'on appelle <strong>props</strong> et retourne un élément du DOM virtuel.</p><p>Ils sont séparés en deux types&nbsp;: <strong>Les <em>\"stateless functional components\"</em></strong> et <strong>les composants-classes.</strong></p>"},
        {
            "titles" : ["3. La ressource","3.3. Les composants", "3.3.1 Les \"stateless functional components\""],
            "content" : ""
        },
        {
            "titles" : ["3. La ressource","3.3. Les composants", "3.3.2 Les Composants-classes"],
            "content" : ""
        },
        {
            "titles" : ["3. La ressource","3.3. Les composants", "3.3.3 Les imports et exports"],
            "content" : ""
        },
        {
            "titles" : ["3. La ressource","3.4. Le JSX"],
            "content" : "Blabla"
        },
        {
            "titles" : ["3. La ressource","3.4. Deuxième sous-partie du contenu","3.4.1. Première sous-sous-partie du contenu"],
            "content" : "Blabla"
        },
        {
            "titles" : ["3. La ressource","3.4. Deuxième sous-partie du contenu","3.4.2. Deuxième sous-sous-partie du contenu"],
            "content" : "Blabla"
        },
        {
            "titles" : ["3. La ressource","3.X. La mise en production"],
            "content" : "<p>Maintenant que nous savons faire une application React.js qui se tient, il est temps d'en faire profiter le monde, sinon elle n'aura pas grand intérêt.</p><p>Pour cela, nous allons voir deux moyens&nbsp:</p><ul><li>Sur un serveur distant</li><li>Via Heroku</li></ul>"
        },
        {
            "titles" : ["3. La ressource","3.X. La mise en production", "3.X.1. Sur un serveur distant"],
            "content" : "<p>En l'état, l'application ne peux pas être passée en production, les clients seraient incapable de la lire. Donc on va demande à CRA de créer un build de production, grâce à la commande :</p><pre><code class=\"language-bash\"></code>$ npm run build</code></pre><p>Il suffit de déposer le dossier <code>build</code>, ainsi créé, dans le dépot distant pour que l'application soit fonctionnelle.<div class=\"card box-shadow-0 border-danger\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h4 class=\"card-title\">⚠️ ALERTE ERREUR COMMUNE</h4><p>Si l'application n'est pas placée à la racine du site, il va y avoir un problème avec les chemins de chargement des fichiers. Pour éviter cela, il suffit d'ajouter la ligne suivante au fichier <code>package.json</code>, avant de lancer la création du build de production.</p><pre><code class=\"language-javascript\">\"homepage\": \".\"</code></pre><p>Cela permettra de générer des routes relative à partir du fichier <code>index.html</code> et non plus la racine du site.</p></div></div></div>"
        },
        {
            "titles": ["3. La ressource","3.X. La mise en production", "3.X.2. Sur Heroku"],
            "content" : "<p>La mise en production sur Heroku est tout aussi simple.</p><p>Il faut tout d'abord indiquer à l'application sous quels moteurs elle fonctionne. Pour le savoir, tapez dans le terminal</p><pre><code class=\"language-bash\">$ node -v\nv10.15.3\n\n$ npm -v\n6.9.0</code></pre><p>Puis de reporter ces informations dans le <code>package.json</code>, avec les lignes suivantes&nbsp;:</p><pre><code class=\"language-javascript\">\"engines\": {\n\t\"npm\" : \"VERSION_DE_NPM\",\n\t\"node\" : \"VERSION_DE_NODE\"\n}</code></pre><p>Après, on créé le dépôt distant&nbsp;:</p><pre><code class=\"language-bash\">$ heroku create $APP_NAME --buildpack github.com/mars/create-react-app-buildpack.git</code></pre><p>L'option <code>--buildpack github.com/mars/create-react-app-buildpack.git</code> permet au serveur Heroku de créer automatiquement un build de production.</p><p>Enfin, comme on le ferait avec une application Rails, on pousse le code.</p><div class=\"card box-shadow-0 border-info\"><div class=\"card-content collapse show\"><div class=\"card-body\"><h4 class=\"card-title\">🚀 ALERTE BONNE ASTUCE</h4><p>Pour gagner du temps, vous pouvez ajouter les deux lignes suivantes dans le fichier de configuration de votre terminal.</p><pre><code class=\"language-bash\">alias gshm=\"git push heroku master\"<br/>alias glhm=\"git pull heroku master\"</code></pre></div></div></div>"
        },
        {
            "titles" : ["4. Points importants à retenir"],
            "content" : "La partie précédente explique de manière exhaustive la ressource. Cette partie est le \"récapitulatif à emporter avec soi\". Quels sont les points importants à retenir ? Quel est le strict minimum de la ressource à garder pour la faire marcher ? C'est ici que cela se passe."
        },
        {
            "titles" : ["5. Pour aller plus loin"],
            "content" : "Dans cette partie, nous mettons les liens qui nous semblent intéressants pour approfondir la ressource. Pour chaque lien, il faudra mentionner la partie qui nous intéresse, ainsi la raison pourquoi on met le lien."
        }
    ]
}
